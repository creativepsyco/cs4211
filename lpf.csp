/******************************************************************
Constants
******************************************************************/
#define numSubs			2;
#define emptySock		-1;

/******************************************************************
Outgoing and Incoming Sockets for each subscriber
******************************************************************/
var outgoingSock 	= [emptySock(numSubs)];
var incomingSock 	= [emptySock(numSubs)];

/******************************************************************
State values
0 : Idling
1 : Calling
2 : Answering
3 : Calling Stalled
4 : Answering Stalled
******************************************************************/
var state 			= [0(numSubs)];

/******************************************************************
The channels for communicating with the exchange
******************************************************************/
/******************************************************************
Channels that are used to initiate calls
******************************************************************/
channel toExchange 			0;
channel fromExchange 		0;

/******************************************************************
Channels that are used by the caller to hang up calls
******************************************************************/
channel hangUpToExchange 	0;
channel hangUpFromExchange	0;

/******************************************************************
Channels that are used by the callee to stall calls or resume 
stalled calls.
******************************************************************/
channel resumeToExchange	0;
channel stallToExchange		0;

/******************************************************************
Function used to initiate all the subscribers in parallel
******************************************************************/
Subscribers() = (||subId:{0..numSubs-1}@Subscriber(subId));

/******************************************************************
Main subscriber function.
Used to alternate the subscribers between various states of 
execution
Sample paths subscriber can go through
idling -> calling -> callStall -> calling -> idling 
idling -> answering -> ansStall -> answering -> idling
******************************************************************/
Subscriber(subId) = [state[subId] == 0]	idling.subId -> (Dialing(subId) [] Subscriber(subId))
					[] [state[subId] == 1] calling.subId -> (HangUp(subId) [] Subscriber(subId))
					[] [state[subId] == 2] answering.subId -> (Stall(subId) [] Subscriber(subId))
					[] [state[subId] == 3] callStall.subId -> (HangUp(subId) [] Subscriber(subId))
					[] [state[subId] == 4] ansStall.subId -> (Resume(subId) [] Subscriber(subId));

/******************************************************************
Dialing function.
Used to select a target to call, then send it to the Calling 
function which will then attempt to make the call
******************************************************************/	
Dialing(subId) = ([]targetId:{0..numSubs-1}@Calling(subId, targetId));

/******************************************************************
Calling function.
Used to call the target that Dialing selected.
Exchange will inform if connection succeeds.
If succeeds will go ahead with the call and call Subscriber 
function.
If fail will check if there is someone else calling. If no one else
is calling reset state to idle. If someone else is calling, accept
accept the call and reset only outgoingSock
******************************************************************/
Calling(subId, targetId) = connecting.subId.targetId -> toExchange!subId.targetId{state[subId]=1;outgoingSock[subId]=targetId;} -> fromExchange?connected -> 
						(
							[connected==0] connectionSucceeded.subId.targetId{state[subId]=1} -> Subscriber(subId)
							[][connected==1&&incomingSock[subId]==emptySock]lineBusy.subId{state[subId]=0;outgoingSock[subId]=emptySock} -> connectionFail.subId.targetId -> Subscriber(subId)
							[][connected==1&&incomingSock[subId]!=emptySock]inCall.subId{state[subId]=2;outgoingSock[subId]=emptySock} -> Subscriber(subId)
						);

/******************************************************************
Hangup function
Used to model the caller hanging up
Resets all user properties to origin
******************************************************************/
HangUp(subId) =  hangUpToExchange!subId -> hangUp.subId{state[subId]=0;outgoingSock[subId]=emptySock;} -> Subscriber(subId);

/******************************************************************
Stall function
Use to model the callee stalling the phone call by putting down 
the phone
Changes callee state to match that of Answering Stall, and lets 
the exchange handle the state for the caller
******************************************************************/
Stall(subId) = stall.subId -> stallToExchange!subId{state[subId]=4;} -> Subscriber(subId);

/******************************************************************
Resume function
Use to model the callee resuming a phone call after stalling it
Changes the callee state to match that of Answering Call, and lets
the exchange handle the state of the caller
******************************************************************/
Resume(subId) = resume.subId -> resumeToExchange!subId{state[subId]=2} -> Subscriber(subId);

/******************************************************************
Exchange function
Starts the main Exchange function, which is made up of 4 Exchange 
processes
******************************************************************/
Exchange() = ExchangeCalling() || ExchangeHangUp() || ExchangeStall() || ExchangeResume();

/******************************************************************
ExchangeCalling function
Used to model the caller informing the Exchange that it wants to 
call a number
If the callee is free, it will patch the call through and handle
the states for the callee
******************************************************************/
ExchangeCalling() = toExchange?from.to -> 
			(	
				[from==to || state[to]!=0] fromExchange!1 -> ExchangeCalling()
				[][state[to]==0]fromExchange!0{state[to]=2;incomingSock[to]=from} -> ExchangeCalling()
			);

/******************************************************************
ExchangeHangUp function
Used to model the caller informing the Exchange that it wants to 
hang up a call
If will handle the states for the callee and hang up the call
******************************************************************/
ExchangeHangUp() = hangUpToExchange?from ->
			(
				[outgoingSock[from]!=emptySock&&incomingSock[outgoingSock[from]]==from] hangingUp.from{state[outgoingSock[from]]=0;incomingSock[outgoingSock[from]]=emptySock} -> ExchangeHangUp()
				[][!(outgoingSock[from]!=emptySock&&incomingSock[outgoingSock[from]]==from)] Error()
			);

/******************************************************************
ExchangeStall function
Used to model the callee informing the Exchange that it wants to 
stall a call
If will handle the states for the caller and stall the call
******************************************************************/
ExchangeStall() = stallToExchange?from ->
			(
				[incomingSock[from]!=emptySock&&outgoingSock[incomingSock[from]]==from] stall.from{state[incomingSock[from]]=3} -> ExchangeStall()
				[][!(incomingSock[from]!=emptySock&&outgoingSock[incomingSock[from]]==from)] Error()
			);

/******************************************************************
ExchangeResume function
Used to model the callee informing the Exchange that it wants to 
resume the call
If will handle the states for the caller and resume the call
******************************************************************/
ExchangeResume() = resumeToExchange?from ->
			(
				[incomingSock[from]!=emptySock&&outgoingSock[incomingSock[from]]==from] resume.from{state[incomingSock[from]]=1} -> ExchangeResume()
				[][!(incomingSock[from]!=emptySock&&outgoingSock[incomingSock[from]]==from)] Error()
			);

/******************************************************************
System function
Used to start the entire system
******************************************************************/
System() = Exchange() || Subscribers();


/******************************************************************
Error function
Used to show that the system will never enter an error state
******************************************************************/
Error() = error -> Stop;

#assert System deadlockfree;
#assert System nonterminating;

/******************************************************************
Property 1
Checks that the system will never enter an invalid state.
This property should always be valid
******************************************************************/
#assert System |= (!error);

/******************************************************************
Property 2
Checks that people are unable to call themselves.
This property should be valid
******************************************************************/
#assert System() |= connecting.0.0 -> connectionFail.0.0;

/******************************************************************
Property 3
Checks that people cannot call someone who is currently attempting a self-call
This property should be valid
******************************************************************/
#assert System() |= connecting.0.0 -> connectionFail.0.0 -> connecting.1.0 -> connectionFail.1.0;

/******************************************************************
Property 4
Caller will always hang up.
This property should be valid
******************************************************************/
#assert System() |= calling.0 -> [] hangUp.0;